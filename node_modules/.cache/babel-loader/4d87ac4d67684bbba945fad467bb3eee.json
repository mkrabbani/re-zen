{"ast":null,"code":"import { createParser, system } from \"@styled-system/core\";\nimport { t } from \"../utils\";\nvar config = {\n  position: true,\n  pos: t.prop(\"position\"),\n  zIndex: {\n    property: \"zIndex\",\n    scale: \"zIndices\"\n  },\n  inset: t.spaceT(\"inset\"),\n  insetX: t.spaceT([\"left\", \"right\"]),\n  insetInline: t.spaceT(\"insetInline\"),\n  insetY: t.spaceT([\"top\", \"bottom\"]),\n  insetBlock: t.spaceT(\"insetBlock\"),\n  top: t.spaceT(\"top\"),\n  insetBlockStart: t.spaceT(\"insetBlockStart\"),\n  bottom: t.spaceT(\"bottom\"),\n  insetBlockEnd: t.spaceT(\"insetBlockEnd\"),\n  left: t.spaceT(\"left\"),\n  insetInlineStart: t.spaceT(\"insetInlineStart\"),\n  right: t.spaceT(\"right\"),\n  insetInlineEnd: t.spaceT(\"insetInlineEnd\")\n};\nconfig.insetStart = config.insetInlineStart;\nconfig.insetEnd = config.insetInlineEnd;\n/**\n * Types for position CSS properties\n */\n\nexport var position = system(config);\nexport var positionParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/position.ts"],"names":["config","position","pos","t","zIndex","property","scale","inset","insetX","insetInline","insetY","insetBlock","top","insetBlockStart","bottom","insetBlockEnd","left","insetInlineStart","right","insetInlineEnd","system","positionParser","createParser"],"mappings":"AAAA,SAAA,YAAA,EAAA,MAAA,QAAA,qBAAA;AAEA,SAAA,CAAA,QAAA,UAAA;AAEA,IAAMA,MAAc,GAAG;AACrBC,EAAAA,QAAQ,EADa,IAAA;AAErBC,EAAAA,GAAG,EAAEC,CAAC,CAADA,IAAAA,CAFgB,UAEhBA,CAFgB;AAGrBC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAV,QAAA;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAHa;AAIrBC,EAAAA,KAAK,EAAEJ,CAAC,CAADA,MAAAA,CAJc,OAIdA,CAJc;AAKrBK,EAAAA,MAAM,EAAEL,CAAC,CAADA,MAAAA,CAAS,CAAA,MAAA,EALI,OAKJ,CAATA,CALa;AAMrBM,EAAAA,WAAW,EAAEN,CAAC,CAADA,MAAAA,CANQ,aAMRA,CANQ;AAOrBO,EAAAA,MAAM,EAAEP,CAAC,CAADA,MAAAA,CAAS,CAAA,KAAA,EAPI,QAOJ,CAATA,CAPa;AAQrBQ,EAAAA,UAAU,EAAER,CAAC,CAADA,MAAAA,CARS,YAQTA,CARS;AASrBS,EAAAA,GAAG,EAAET,CAAC,CAADA,MAAAA,CATgB,KAShBA,CATgB;AAUrBU,EAAAA,eAAe,EAAEV,CAAC,CAADA,MAAAA,CAVI,iBAUJA,CAVI;AAWrBW,EAAAA,MAAM,EAAEX,CAAC,CAADA,MAAAA,CAXa,QAWbA,CAXa;AAYrBY,EAAAA,aAAa,EAAEZ,CAAC,CAADA,MAAAA,CAZM,eAYNA,CAZM;AAarBa,EAAAA,IAAI,EAAEb,CAAC,CAADA,MAAAA,CAbe,MAafA,CAbe;AAcrBc,EAAAA,gBAAgB,EAAEd,CAAC,CAADA,MAAAA,CAdG,kBAcHA,CAdG;AAerBe,EAAAA,KAAK,EAAEf,CAAC,CAADA,MAAAA,CAfc,OAedA,CAfc;AAgBrBgB,EAAAA,cAAc,EAAEhB,CAAC,CAADA,MAAAA,CAAAA,gBAAAA;AAhBK,CAAvB;AAmBAH,MAAM,CAANA,UAAAA,GAAoBA,MAAM,CAA1BA,gBAAAA;AACAA,MAAM,CAANA,QAAAA,GAAkBA,MAAM,CAAxBA,cAAAA;AAEA;AACA;AACA;;AAgEA,OAAO,IAAMC,QAAQ,GAAGmB,MAAM,CAAvB,MAAuB,CAAvB;AACP,OAAO,IAAMC,cAAc,GAAGC,YAAY,CAAnC,MAAmC,CAAnC","sourcesContent":["import { Config, createParser, system } from \"@styled-system/core\"\nimport * as CSS from \"csstype\"\nimport { Length, t, ResponsiveValue } from \"../utils\"\n\nconst config: Config = {\n  position: true,\n  pos: t.prop(\"position\"),\n  zIndex: { property: \"zIndex\", scale: \"zIndices\" },\n  inset: t.spaceT(\"inset\"),\n  insetX: t.spaceT([\"left\", \"right\"]),\n  insetInline: t.spaceT(\"insetInline\"),\n  insetY: t.spaceT([\"top\", \"bottom\"]),\n  insetBlock: t.spaceT(\"insetBlock\"),\n  top: t.spaceT(\"top\"),\n  insetBlockStart: t.spaceT(\"insetBlockStart\"),\n  bottom: t.spaceT(\"bottom\"),\n  insetBlockEnd: t.spaceT(\"insetBlockEnd\"),\n  left: t.spaceT(\"left\"),\n  insetInlineStart: t.spaceT(\"insetInlineStart\"),\n  right: t.spaceT(\"right\"),\n  insetInlineEnd: t.spaceT(\"insetInlineEnd\"),\n}\n\nconfig.insetStart = config.insetInlineStart\nconfig.insetEnd = config.insetInlineEnd\n\n/**\n * Types for position CSS properties\n */\nexport interface PositionProps {\n  /**\n   * The CSS `z-index` property\n   */\n  zIndex?: ResponsiveValue<string | CSS.Property.ZIndex>\n  /**\n   * The CSS `top` property\n   */\n  top?: ResponsiveValue<CSS.Property.Top<Length>>\n  insetBlockStart?: ResponsiveValue<CSS.Property.InsetBlockStart<Length>>\n  /**\n   * The CSS `right` property\n   */\n  right?: ResponsiveValue<CSS.Property.Right<Length>>\n  /**\n   * When the direction is `ltr`, `insetInlineEnd` is equivalent to `right`.\n   * When the direction is `rtl`, `insetInlineEnd` is equivalent to `left`.\n   */\n  insetInlineEnd?: ResponsiveValue<CSS.Property.InsetInlineEnd<Length>>\n  /**\n   * When the direction is `ltr`, `insetEnd` is equivalent to `right`.\n   * When the direction is `rtl`, `insetEnd` is equivalent to `left`.\n   */\n  insetEnd?: ResponsiveValue<CSS.Property.InsetInlineEnd<Length>>\n  /**\n   * The CSS `bottom` property\n   */\n  bottom?: ResponsiveValue<CSS.Property.Bottom<Length>>\n  insetBlockEnd?: ResponsiveValue<CSS.Property.InsetBlockEnd<Length>>\n  /**\n   * The CSS `left` property\n   */\n  left?: ResponsiveValue<CSS.Property.Left<Length>>\n  insetInlineStart?: ResponsiveValue<CSS.Property.InsetInlineStart<Length>>\n  /**\n   * When the direction is `start`, `end` is equivalent to `left`.\n   * When the direction is `start`, `end` is equivalent to `right`.\n   */\n  insetStart?: ResponsiveValue<CSS.Property.InsetInlineStart<Length>>\n  /**\n   * The CSS `left`, `right`, `top`, `bottom` property\n   */\n  inset?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `left`, and `right` property\n   */\n  insetX?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `top`, and `bottom` property\n   */\n  insetY?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `position` property\n   */\n  pos?: ResponsiveValue<CSS.Property.Position>\n  /**\n   * The CSS `position` property\n   */\n  position?: ResponsiveValue<CSS.Property.Position>\n  insetInline?: ResponsiveValue<CSS.Property.InsetInline>\n  insetBlock?: ResponsiveValue<CSS.Property.InsetBlock>\n}\n\nexport const position = system(config)\nexport const positionParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}